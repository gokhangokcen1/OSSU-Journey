
Syntax:
	if e1 then e2 else e3
	where if, then, and else are keywords and
	e1, e2, and e3 are subexpressions

Type-checking:
	first e1 must have type bool
	e2 and e3 can have any type (let's call it t), but they
	must have the same type t
	the type of the entire expression is also t

Evaluation rules:
	   first evaluate e1 to a value call it v1
	   if it's true, evaluate e2 and that result is the whole expression's result
	   else, evaluate e3 and that result is the whole expressions's result
	   

LESS-THAN COMPARISONS

Syntax:
	if e1 < e2 then e1 else e2
	where if, <, then, and else are keywords and
	e1, and e2 are subexpressions

Type-checking:
	e1 and e2 must have the same numeric type (e.g., int)
	the entire expression will have the same type as e1 and e2 (let's call it t).

Evaluation rules:
	   first evaluate e1 to a value call it v1
	   second evaluate e2 to a value call it v2
	   compare v1 and v2:
	   	   if it's true, evaluate e1 and that result is the whole expression's result
		   else, evaluate e2 and that result is the whole expressions's result 
